{"version":3,"file":"index.js","sources":["../../../../src/object/index.ts"],"sourcesContent":["/**\n * 对象工具类\n */\nexport const objectUtil = {\n\t/**\n\t * 对象URL参数化\n\t */\n\tobjectToQueryString(obj: any): string {\n\t\tlet params = \"\";\n\t\tfor (const key in obj) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(obj, key)) {\n\t\t\t\tif (params !== \"\") {\n\t\t\t\t\tparams += \"&\";\n\t\t\t\t}\n\t\t\t\tparams += `${encodeURIComponent(key)}=${encodeURIComponent(obj[key])}`;\n\t\t\t}\n\t\t}\n\t\treturn params;\n\t},\n\t/**\n\t * 是否存在重复值\n\t */\n\thasDuplicateProperty<T>(arr: T[], prop: keyof T): boolean {\n\t\tconst values = arr.map((obj) => obj[prop]);\n\t\tconst uniqueValues = new Set(values);\n\t\treturn values.length !== uniqueValues.size;\n\t},\n\t/**\n\t * 是否存在非重复值\n\t */\n\thasDifferentProperty<T>(arr: T[], prop: keyof T): boolean {\n\t\tconst valueSet = new Set<any>();\n\t\tfor (const obj of arr) {\n\t\t\tvalueSet.add(obj[prop]);\n\t\t\tif (valueSet.size > 1) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\t/**\n\t * 时间处理翻译\n\t */\n\tdateTimeFix(date: string | Date | null | undefined): string {\n\t\tif (date !== null && date !== undefined && date) {\n\t\t\tif (typeof date === \"string\") {\n\t\t\t\tdate = new Date(date);\n\t\t\t}\n\n\t\t\t// 获取时间戳\n\t\t\tlet timestamp = date.getTime();\n\t\t\tif (timestamp.toString().length < 13) {\n\t\t\t\tconst arrTimestamp = timestamp.toString().split(\"\");\n\t\t\t\tfor (let start = 0; start < 13; start++) {\n\t\t\t\t\tif (!arrTimestamp[start]) {\n\t\t\t\t\t\tarrTimestamp[start] = \"0\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttimestamp = parseInt(arrTimestamp.join(\"\"));\n\t\t\t}\n\t\t\tconst minute = 1000 * 60;\n\t\t\tconst hour = minute * 60;\n\t\t\tconst day = hour * 24;\n\t\t\tconst month = day * 30;\n\t\t\t// 获取当前时间\n\t\t\tconst curTime = new Date().getTime();\n\t\t\t// 比较\n\t\t\tconst diffValue = curTime - timestamp;\n\n\t\t\t// 计算差异时间的量级\n\t\t\tconst monthC = diffValue / month;\n\t\t\tconst weekC = diffValue / (7 * day);\n\t\t\tconst dayC = diffValue / day;\n\t\t\tconst hourC = diffValue / hour;\n\t\t\tconst minC = diffValue / minute;\n\n\t\t\t// 如果本地时间反而小于变量时间\n\t\t\tif (diffValue < 0) {\n\t\t\t\tconst monthC1 = Math.abs(monthC);\n\t\t\t\tconst weekC1 = Math.abs(weekC);\n\t\t\t\tconst dayC1 = Math.abs(dayC);\n\t\t\t\tconst hourC1 = Math.abs(hourC);\n\t\t\t\tconst minC1 = Math.abs(minC);\n\n\t\t\t\tif (monthC1 > 12) {\n\t\t\t\t\t// 超过1年，直接显示 几 年前\n\t\t\t\t\treturn `${parseInt(`${monthC1 / 12}`)}年后`;\n\t\t\t\t} else if (monthC1 >= 6) {\n\t\t\t\t\treturn \"半年后\";\n\t\t\t\t} else if (monthC1 >= 1) {\n\t\t\t\t\treturn `${parseInt(`${monthC1}`)}月后`;\n\t\t\t\t} else if (weekC1 > 2) {\n\t\t\t\t\treturn \"半月后\";\n\t\t\t\t} else if (weekC1 >= 1) {\n\t\t\t\t\treturn `${parseInt(`${weekC1}`)}周后`;\n\t\t\t\t} else if (dayC1 >= 1) {\n\t\t\t\t\treturn `${parseInt(`${dayC1}`)}天后`;\n\t\t\t\t} else if (hourC1 >= 1) {\n\t\t\t\t\treturn `${parseInt(`${hourC1}`)}小时后`;\n\t\t\t\t} else if (minC1 >= 1) {\n\t\t\t\t\treturn `${parseInt(`${minC1}`)}分钟后`;\n\t\t\t\t}\n\t\t\t\treturn \"刚刚\";\n\t\t\t\t// return \"不久前\";\n\t\t\t}\n\n\t\t\t// 使用\n\t\t\tif (monthC > 12) {\n\t\t\t\t// 超过1年，直接显示 几 年前\n\t\t\t\treturn `${parseInt(`${monthC / 12}`)}年前`;\n\t\t\t} else if (monthC >= 6) {\n\t\t\t\treturn \"半年前\";\n\t\t\t} else if (monthC >= 1) {\n\t\t\t\treturn `${parseInt(`${monthC}`)}月前`;\n\t\t\t} else if (weekC > 2) {\n\t\t\t\treturn \"半月前\";\n\t\t\t} else if (weekC >= 1) {\n\t\t\t\treturn `${parseInt(`${weekC}`)}周前`;\n\t\t\t} else if (dayC >= 1) {\n\t\t\t\treturn `${parseInt(`${dayC}`)}天前`;\n\t\t\t} else if (hourC >= 1) {\n\t\t\t\treturn `${parseInt(`${hourC}`)}小时前`;\n\t\t\t} else if (minC >= 1) {\n\t\t\t\treturn `${parseInt(`${minC}`)}分钟前`;\n\t\t\t}\n\t\t\treturn \"刚刚\";\n\t\t} else {\n\t\t\treturn \"\";\n\t\t}\n\t},\n};\n"],"names":["objectUtil","objectToQueryString","obj","params","key","Object","prototype","hasOwnProperty","call","encodeURIComponent","hasDuplicateProperty","arr","prop","values","map","uniqueValues","Set","length","size","hasDifferentProperty","valueSet","add","dateTimeFix","date","Date","timestamp","getTime","toString","arrTimestamp","split","start","parseInt","join","minute","hour","day","month","diffValue","monthC","weekC","dayC","hourC","minC","monthC1","Math","abs","weekC1","dayC1","hourC1","minC1"],"mappings":"gFAGO,MAAMA,EAAa,CAIzB,mBAAAC,CAAoBC,GACnB,IAAIC,EAAS,GACb,IAAA,MAAWC,KAAOF,EACbG,OAAOC,UAAUC,eAAeC,KAAKN,EAAKE,KAC9B,KAAXD,IACOA,GAAA,KAEDA,GAAA,GAAGM,mBAAmBL,MAAQK,mBAAmBP,EAAIE,OAG1D,OAAAD,CACR,EAIA,oBAAAO,CAAwBC,EAAUC,GACjC,MAAMC,EAASF,EAAIG,KAAKZ,GAAQA,EAAIU,KAC9BG,EAAe,IAAIC,IAAIH,GACtB,OAAAA,EAAOI,SAAWF,EAAaG,IACvC,EAIA,oBAAAC,CAAwBR,EAAUC,GAC3B,MAAAQ,MAAeJ,IACrB,IAAA,MAAWd,KAAOS,EAEb,GADKS,EAAAC,IAAInB,EAAIU,IACbQ,EAASF,KAAO,EACZ,OAAA,EAGF,OAAA,CACR,EAIA,WAAAI,CAAYC,GACX,GAAIA,SAAuCA,EAAM,CAC5B,iBAATA,IACHA,EAAA,IAAIC,KAAKD,IAIb,IAAAE,EAAYF,EAAKG,UACrB,GAAID,EAAUE,WAAWV,OAAS,GAAI,CACrC,MAAMW,EAAeH,EAAUE,WAAWE,MAAM,IAChD,IAAA,IAASC,EAAQ,EAAGA,EAAQ,GAAIA,IAC1BF,EAAaE,KACjBF,EAAaE,GAAS,KAGxBL,EAAYM,SAASH,EAAaI,KAAK,IAAG,CAE3C,MAAMC,EAAS,IACTC,EAAgB,GAATD,EACPE,EAAa,GAAPD,EACNE,EAAc,GAAND,EAIRE,GAFU,IAAIb,MAAOE,UAECD,EAGtBa,EAASD,EAAYD,EACrBG,EAAQF,GAAa,EAAIF,GACzBK,EAAOH,EAAYF,EACnBM,EAAQJ,EAAYH,EACpBQ,EAAOL,EAAYJ,EAGzB,GAAII,EAAY,EAAG,CACZ,MAAAM,EAAUC,KAAKC,IAAIP,GACnBQ,EAASF,KAAKC,IAAIN,GAClBQ,EAAQH,KAAKC,IAAIL,GACjBQ,EAASJ,KAAKC,IAAIJ,GAClBQ,EAAQL,KAAKC,IAAIH,GAEvB,OAAIC,EAAU,GAEN,GAAGZ,SAAS,GAAGY,EAAU,QACtBA,GAAW,EACd,MACGA,GAAW,EACd,GAAGZ,SAAS,GAAGY,SACZG,EAAS,EACZ,MACGA,GAAU,EACb,GAAGf,SAAS,GAAGe,SACZC,GAAS,EACZ,GAAGhB,SAAS,GAAGgB,SACZC,GAAU,EACb,GAAGjB,SAAS,GAAGiB,UACZC,GAAS,EACZ,GAAGlB,SAAS,GAAGkB,UAEhB,IAAA,CAKR,OAAIX,EAAS,GAEL,GAAGP,SAAS,GAAGO,EAAS,QACrBA,GAAU,EACb,MACGA,GAAU,EACb,GAAGP,SAAS,GAAGO,SACZC,EAAQ,EACX,MACGA,GAAS,EACZ,GAAGR,SAAS,GAAGQ,SACZC,GAAQ,EACX,GAAGT,SAAS,GAAGS,SACZC,GAAS,EACZ,GAAGV,SAAS,GAAGU,UACZC,GAAQ,EACX,GAAGX,SAAS,GAAGW,UAEhB,IAAA,CAEA,MAAA,EACR"}