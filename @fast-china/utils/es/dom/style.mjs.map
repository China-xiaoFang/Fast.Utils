{"version":3,"file":"style.mjs","sources":["../../../../src/dom/style.ts"],"sourcesContent":["import { isNumber, isString } from \"lodash-unified\";\nimport { consoleWarn } from \"../console\";\n\nconst isStringNumber = (val: string): boolean => {\n\tif (!isString(val)) {\n\t\treturn false;\n\t}\n\treturn !Number.isNaN(Number(val));\n};\n\n/**\n * 添加单位\n * @param value 字符串或数字类型\n * @param defaultUnit 单位\n */\nexport const addUnit = (value?: string | number, defaultUnit = \"px\"): string => {\n\tif (!value) return \"\";\n\tif (isNumber(value) || isStringNumber(value)) {\n\t\treturn `${value}${defaultUnit}`;\n\t} else if (isString(value)) {\n\t\treturn value;\n\t}\n\tconsoleWarn(\"document\", \"binding value must be a string or number\");\n};\n\n/**\n * 将样式对象转换为内联 style 字符串（kebab-case 格式）\n * @param style 样式对象（CSSStyleDeclaration）\n * @returns 返回符合 HTML 内联格式的样式字符串，例如 \"font-size: 14px; color: red;\"\n */\nexport const styleToString = (style: CSSStyleDeclaration): string => {\n\tif (!style) return \"\";\n\treturn Object.entries(style)\n\t\t.map(([key, value]) => {\n\t\t\tconst keyName = key.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n\t\t\treturn `${keyName}: ${value};`;\n\t\t})\n\t\t.join(\" \");\n};\n"],"names":[],"mappings":";;AAGA,MAAM,iBAAiB,CAAC,QAAyB;AAC5C,MAAA,CAAC,SAAS,GAAG,GAAG;AACZ,WAAA;AAAA,EAAA;AAER,SAAO,CAAC,OAAO,MAAM,OAAO,GAAG,CAAC;AACjC;AAOO,MAAM,UAAU,CAAC,OAAyB,cAAc,SAAiB;AAC3E,MAAA,CAAC,MAAc,QAAA;AACnB,MAAI,SAAS,KAAK,KAAK,eAAe,KAAK,GAAG;AACtC,WAAA,GAAG,KAAK,GAAG,WAAW;AAAA,EAAA,WACnB,SAAS,KAAK,GAAG;AACpB,WAAA;AAAA,EAAA;AAER,cAAY,YAAY,0CAA0C;AACnE;AAOa,MAAA,gBAAgB,CAAC,UAAuC;AAChE,MAAA,CAAC,MAAc,QAAA;AACZ,SAAA,OAAO,QAAQ,KAAK,EACzB,IAAI,CAAC,CAAC,KAAK,KAAK,MAAM;AACtB,UAAM,UAAU,IAAI,QAAQ,YAAY,KAAK,EAAE,YAAY;AACpD,WAAA,GAAG,OAAO,KAAK,KAAK;AAAA,EAAA,CAC3B,EACA,KAAK,GAAG;AACX;"}